sudo apt update
sudo apt install libgstreamer1.0-dev gstreamer1.0-tools gstreamer1.0-plugins-base \
gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
gstreamer1.0-libav


gst-launch-1.0 rtspsrc location=rtsp://192.168.144.25:8554/main.264 latency=0 ! \
rtph264depay ! h264parse ! nvh264dec ! videoconvert ! autovideosink



# image_streaming/pub.py

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import cv2
from rclpy.qos import QoSProfile, QoSHistoryPolicy, QoSReliabilityPolicy
import time

class ImagePublisher(Node):
    def __init__(self):
        super().__init__('image_publisher')

        # QoS 프로파일 설정
        qos_profile = QoSProfile(
            history=QoSHistoryPolicy.KEEP_LAST,
            depth=10,
            reliability=QoSReliabilityPolicy.BEST_EFFORT
        )

        self.publisher_ = self.create_publisher(Image, 'image_topic', qos_profile)
        timer_period = 0.1  # 초 단위 (10 FPS)
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.bridge = CvBridge()

        # FFMPEG를 이용한 RTSP 스트림 설정
        self.rtsp_url = "rtsp://192.168.144.25:8554/main.264"  # 실제 RTSP 스트림 URL로 변경
        self.cap = self.open_stream()

    def open_stream(self):
        # FFMPEG 백엔드를 명시적으로 사용하여 VideoCapture 초기화
        cap = cv2.VideoCapture(self.rtsp_url, cv2.CAP_FFMPEG)
        if not cap.isOpened():
            self.get_logger().error(f'Failed to open RTSP stream: {self.rtsp_url}')
            return None
        else:
            self.get_logger().info(f'Connected to RTSP stream: {self.rtsp_url}')
            # Optional: OpenCV 비디오 버퍼 사이즈 조정 (필요시)
            # cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
            return cap

    def timer_callback(self):
        if self.cap is None:
            self.get_logger().info('Attempting to reconnect to RTSP stream...')
            self.cap = self.open_stream()
            if self.cap is None:
                self.get_logger().warn('Reconnection failed. Will retry in 5 seconds.')
                self.timer.cancel()
                self.create_timer(5.0, self.timer_callback)
            return

        ret, frame = self.cap.read()
        if not ret:
            self.get_logger().warn('Failed to read frame from RTSP stream.')
            self.cap.release()
            self.cap = None
            return

        # ROS Image 메시지로 변환
        try:
            msg = self.bridge.cv2_to_imgmsg(frame, encoding='bgr8')
            self.publisher_.publish(msg)
            self.get_logger().debug('Published image frame.')
        except Exception as e:
            self.get_logger().error(f'Failed to convert and publish image: {e}')

    def destroy_node(self):
        if self.cap is not None and self.cap.isOpened():
            self.cap.release()
        super().destroy_node()

def main(args=None):
    rclpy.init(args=args)
    image_publisher = ImagePublisher()
    try:
        rclpy.spin(image_publisher)
    except KeyboardInterrupt:
        pass
    finally:
        image_publisher.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()

