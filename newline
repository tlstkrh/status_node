import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from geometry_msgs.msg import Twist
from cv_bridge import CvBridge
import cv2
import numpy as np
import time

class LineFollower(Node):
    def __init__(self):
        super().__init__('line_follower')
        self.bridge = CvBridge()
        self.image_subscriber = self.create_subscription(
            Image,
            '/rover/camera/image_raw',
            self.image_callback,
            10)
        self.cmd_vel_publisher = self.create_publisher(
            Twist,
            '/cmd_vel',
            10)
        self.get_logger().info('Line Follower Node has been started.')

        # PID 제어 파라미터
        self.Kp = 0.005
        self.Kd = 0.001
        self.Ki = 0.000
        self.previous_error = 0.0
        self.integral = 0.0

        # 상태 변수
        self.turning = False
        self.turn_start_time = None
        self.turn_duration = 3.14  # 회전 시간 (초)

        self.at_end = False
        self.end_start_time = None

        # 미션 완료 플래그
        self.mission_complete = False

    def image_callback(self, msg):
        if self.mission_complete:
            # 미션이 완료되었으면 추가적인 처리를 하지 않음
            return

        if self.turning:
            self.handle_turning()
            return
        elif self.at_end:
            self.handle_at_end()
            return

        # 이미지 변환 및 전처리
        cv_image = self.bridge.imgmsg_to_cv2(msg, desired_encoding='bgr8')
        cv_image = cv2.rotate(cv_image, cv2.ROTATE_180)

        # 이미지 전처리: 그레이스케일 및 이진화
        gray = cv2.cvtColor(cv_image, cv2.COLOR_BGR2GRAY)
        _, thresholded = cv2.threshold(gray, 120, 255, cv2.THRESH_BINARY_INV)

        # 관심 영역(ROI) 설정: 이미지 하단 1/3
        height, width = thresholded.shape
        roi = thresholded[int(height * 2 / 3):, :]

        # 모폴로지 연산으로 노이즈 제거
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
        roi = cv2.morphologyEx(roi, cv2.MORPH_OPEN, kernel)
        roi = cv2.morphologyEx(roi, cv2.MORPH_CLOSE, kernel)

        # 라인 픽셀 비율 계산
        line_pixel_ratio = np.sum(roi == 255) / roi.size
        self.get_logger().debug(f"Line Pixel Ratio: {line_pixel_ratio:.4f}")

        # 라인 검출 여부 판단
        if line_pixel_ratio > 0.4:
            # 미션 완료 조건
            self.get_logger().info("Mission Complete")
            self.stop_robot()
            self.mission_complete = True
            return
        elif line_pixel_ratio > 0.1:
            # 라인이 검출되었을 때
            # 윤곽 검출을 통해 라인의 중심 찾기
            contours, _ = cv2.findContours(roi, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
            if contours:
                largest_contour = max(contours, key=cv2.contourArea)
                M = cv2.moments(largest_contour)

                if M['m00'] != 0:
                    cx = int(M['m10'] / M['m00'])
                    cy = int(M['m01'] / M['m00'])
                    center = width / 2
                    error = cx - center

                    # PID 제어 계산
                    self.integral += error
                    derivative = error - self.previous_error
                    angular_z = -(self.Kp * error + self.Kd * derivative + self.Ki * self.integral)
                    linear_x = 0.7  # 기본 선형 속도

                    # Twist 메시지 생성
                    twist = Twist()
                    twist.linear.x = linear_x
                    twist.angular.z = angular_z

                    self.cmd_vel_publisher.publish(twist)

                    self.get_logger().info(f"Following the line: error={error}, linear.x={linear_x:.2f}, angular.z={angular_z:.4f}")

                    # 이전 에러 업데이트
                    self.previous_error = error
                    self.last_error = error
                else:
                    self.handle_no_contour()
            else:
                self.handle_no_contour()
        else:
            # 라인이 검출되지 않았을 때 회전 시작
            self.turning = True
            self.turn_start_time = self.get_clock().now().nanoseconds / 1e9
            self.get_logger().info("Line not found, starting to turn")

    def handle_turning(self):
        current_time = self.get_clock().now().nanoseconds / 1e9
        elapsed_time = current_time - self.turn_start_time

        if elapsed_time < self.turn_duration:
            twist = Twist()
            twist.linear.x = 0.0
            if self.last_error < 0:
                twist.angular.z = 0.5  # 왼쪽으로 회전
            else:
                twist.angular.z = -0.5  # 오른쪽으로 회전
            self.cmd_vel_publisher.publish(twist)
            self.get_logger().info(f"Turning... ({elapsed_time:.2f}s)")
        else:
            self.turning = False
            self.get_logger().info("Turn completed")

    def handle_at_end(self):
        current_time = self.get_clock().now().nanoseconds / 1e9
        elapsed_time = current_time - self.end_start_time

        if elapsed_time < 0.6:  # 전진 시간 설정 (초)
            twist = Twist()
            twist.linear.x = 0.7  # 전진 속도
            twist.angular.z = 0.0  # 직진
            self.cmd_vel_publisher.publish(twist)
            self.get_logger().info(f"At the end, moving forward... ({elapsed_time:.2f}s)")
        else:
            # 전진 완료, 로봇 정지
            self.stop_robot()
            self.get_logger().info("Reached the end, stopping.")
            # 필요한 경우 노드 종료 또는 다른 동작 수행 가능
            # self.destroy_node()
            # rclpy.shutdown()

    def handle_no_contour(self):
        if abs(self.previous_error) < 10:
            self.at_end = True
            self.end_start_time = self.get_clock().now().nanoseconds / 1e9
            self.get_logger().info("Line ended, moving forward before stopping.")
        else:
            self.turning = True
            self.turn_start_time = self.get_clock().now().nanoseconds / 1e9
            self.get_logger().info("Line not found, starting to turn")

    def stop_robot(self):
        twist = Twist()
        twist.linear.x = 0.0
        twist.angular.z = 0.0
        self.cmd_vel_publisher.publish(twist)

def main(args=None):
    rclpy.init(args=args)
    node = LineFollower()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()

if __name__ == '__main__':
    main()
