#include <rclcpp/rclcpp.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>

class ImageSubscriber : public rclcpp::Node {
public:
    ImageSubscriber() : Node("image_subscriber") {
        // QoS 설정 (Best Effort)
        rclcpp::QoS qos_profile(rclcpp::QoSInitialization::from_rmw(rmw_qos_profile_default));
        qos_profile.reliability(RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT);

        subscription_ = this->create_subscription<sensor_msgs::msg::Image>(
            "image_topic", qos_profile,
            std::bind(&ImageSubscriber::callback, this, std::placeholders::_1)
        );
    }

private:
    void callback(const sensor_msgs::msg::Image::SharedPtr msg) {
        try {
            // OpenCV Mat으로 변환
            cv::Mat frame = cv_bridge::toCvCopy(msg, "bgr8")->image;
            // 로그로 이미지 정보 출력 (예: 크기와 타임스탬프)
            RCLCPP_INFO(this->get_logger(), "Image received: %dx%d, stamp: %u.%u",
                        frame.cols, frame.rows, msg->header.stamp.sec, msg->header.stamp.nanosec);
        } catch (const cv_bridge::Exception &e) {
            RCLCPP_ERROR(this->get_logger(), "Failed to convert image: %s", e.what());
        }
    }

    rclcpp::Subscription<sensor_msgs::msg::Image>::SharedPtr subscription_;
};

int main(int argc, char **argv) {
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<ImageSubscriber>());
    rclcpp::shutdown();
    return 0;
}
