#include <rclcpp/rclcpp.hpp>
#include <sensor_msgs/msg/image.hpp>
#include <cv_bridge/cv_bridge.h>
#include <opencv2/opencv.hpp>
#include <string>

class ImagePublisher : public rclcpp::Node {
public:
    ImagePublisher() : Node("image_publisher") {
        // 고정된 RTSP URL (TCP 옵션 등 필요 시 URL에 추가)
        rtsp_url_ = "rtsp://192.168.144.25:8554/main.264";
        
        // FFMPEG 백엔드를 이용하여 RTSP 스트림 연결
        cap_.open(rtsp_url_, cv::CAP_FFMPEG);
        if (!cap_.isOpened()) {
            RCLCPP_ERROR(this->get_logger(), "Failed to open RTSP stream: %s", rtsp_url_.c_str());
            return;
        } else {
            // 스트림 연결 성공 시 추가 속성 설정
            cap_.set(cv::CAP_PROP_BUFFERSIZE, 1);
            cap_.set(cv::CAP_PROP_FPS, 10);
            cap_.set(cv::CAP_PROP_FRAME_WIDTH, 640);
            cap_.set(cv::CAP_PROP_FRAME_HEIGHT, 480);
            RCLCPP_INFO(this->get_logger(), "Connected to RTSP stream: %s", rtsp_url_.c_str());
        }
        
        // QoS 프로파일 설정: depth=10, BEST_EFFORT
        rclcpp::QoS qos_profile(10);
        qos_profile.reliability(RMW_QOS_POLICY_RELIABILITY_BEST_EFFORT);
        
        // 이미지 메시지를 발행할 Publisher 생성 (토픽 이름: "image_topic")
        publisher_ = this->create_publisher<sensor_msgs::msg::Image>("image_topic", qos_profile);
        
        // 100 밀리초 주기로 타이머 콜백 실행 (약 10 FPS)
        timer_ = this->create_wall_timer(
            std::chrono::milliseconds(100),
            std::bind(&ImagePublisher::timer_callback, this)
        );
    }

private:
    void timer_callback() {
        cv::Mat frame;
        if (cap_.read(frame)) {
            // TEST: GUI 표시를 위해서 읽은 프레임을 OpenCV 창에 출력 (추후 성능 최적화 또는 제거 가능)
            cv::imshow("RTSP Stream", frame);
            // waitKey는 GUI 창이 갱신되도록 필요하며, 1ms 정도 대기 (실제 테스트 시 제거 가능)
            cv::waitKey(1);

            // ROS 이미지 메시지로 변환 후 토픽으로 발행
            auto msg = cv_bridge::CvImage(std_msgs::msg::Header(), "bgr8", frame).toImageMsg();
            publisher_->publish(*msg);
        } else {
            RCLCPP_WARN(this->get_logger(), "Failed to read frame from RTSP stream.");
        }
    }

    cv::VideoCapture cap_;
    std::string rtsp_url_;
    rclcpp::Publisher<sensor_msgs::msg::Image>::SharedPtr publisher_;
    rclcpp::TimerBase::SharedPtr timer_;
};

int main(int argc, char** argv) {
    // ROS2 초기화
    rclcpp::init(argc, argv);
    auto node = std::make_shared<ImagePublisher>();
    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}
